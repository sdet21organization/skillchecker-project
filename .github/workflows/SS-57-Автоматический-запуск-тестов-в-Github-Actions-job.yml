name: Maven Tests with Allure

on:
  push:
    branches:
      - main
      - feature/**
  pull_request:
    branches:
      - main

jobs:
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å –≤–µ—Ç–∫—É gh-pages —Ç–æ–∂–µ

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run API Tests
        run: mvn clean test -f api-tests/pom.xml -Dmaven.test.failure.ignore=true

      - name: Upload Allure Results (API)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-api
          path: api-tests/target/allure-results

  ui-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run UI Tests
        run: mvn clean test -f ui-tests/pom.xml -Dmaven.test.failure.ignore=true

      - name: Upload Allure Results (UI)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-ui
          path: ui-tests/target/allure-results

  allure-report:
    needs: [api-tests, ui-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # —á—Ç–æ–±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å –≤–µ—Ç–∫—É gh-pages —Ç–æ–∂–µ

      - name: Download Allure Results (API)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-api
          path: allure-results/api

      - name: Download Allure Results (UI)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ui
          path: allure-results/ui

      - name: Merge Allure Results
        run: |
          mkdir -p merged-allure-results
          cp -r allure-results/api/* merged-allure-results/ || true
          cp -r allure-results/ui/* merged-allure-results/ || true

      - name: Restore Allure History
        run: |
          branch="${{ github.head_ref || github.ref_name }}"
          safe_branch="${branch//\//-}"   # –∑–∞–º–µ–Ω—è–µ–º '/' –Ω–∞ '-' –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–∞–π–ª–∞–º–∏
          mkdir -p allure-history
          git fetch origin gh-pages || true
          git checkout origin/gh-pages -- "${safe_branch}/history" || echo "No history yet"
          if [ -d "${safe_branch}/history" ]; then
            mv "${safe_branch}/history"/* allure-history/ || true
          fi

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: merged-allure-results
          allure_report: allure-report
          allure_history: allure-history

      - name: Save Allure History for this branch
        run: |
          branch="${{ github.head_ref || github.ref_name }}"
          safe_branch="${branch//\//-}"
          mkdir -p "allure-report/history"
          cp -r allure-report/history/* "allure-report/history/${safe_branch}/" || true

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          destination_dir: ${{ github.head_ref || github.ref_name }}

      - name: Comment PR with Allure Report Link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = context.payload.pull_request.head.ref;
            const repoName = context.repo.repo;
            const owner = context.repo.owner;
            const reportUrl = `https://${owner}.github.io/${repoName}/${branchName}/`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner,
              repo: repoName,
              body: `‚úÖ Allure Report –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: [–æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á—ë—Ç](${reportUrl})`
            });

      - name: Send Discord Notification
        if: always()
        env:
         DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
            branch="${{ github.head_ref || github.ref_name }}"
            report_url="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${branch}/"
            
            passed=$(jq '.statistic.passed' allure-report/widgets/summary.json)
            failed=$(jq '.statistic.failed' allure-report/widgets/summary.json)
            broken=$(jq '.statistic.broken' allure-report/widgets/summary.json)
            skipped=$(jq '.statistic.skipped' allure-report/widgets/summary.json)
            total=$(jq '.statistic.total' allure-report/widgets/summary.json)
            
            color=3066993
            
            payload=$(jq -n \
              --arg passed "$passed" \
              --arg failed "$failed" \
              --arg broken "$broken" \
              --arg skipped "$skipped" \
              --arg total "$total" \
              --arg url "$report_url" \
              --arg branch "$branch" \
              --arg repo "${{ github.repository }}" \
              --argjson color "$color" \
              '{
                "embeds": [
                  {
                   "title": "Allure Report",
                   "url": $url,
                   "color": $color,
                   "fields": [
                     {
                      "name": "üìÅ ",
                      "value": $repo,
                      "inline": true
                     },
                    {
                     "name": "üåø ",
                     "value": $branch,
                     "inline": true
                    },
                    {
                      "name": "Test Results",
                      "value": "‚úÖ Passed \($passed)‚ÄÉ‚ö†Ô∏è Broken \($broken)‚ÄÉ‚ùå Failed \($failed)‚ÄÉ‚è≠Ô∏è Skipped \($skipped)‚ÄÉüìä Total \($total)",
                      "inline": false
                     }
                    ]
                  }
                ]
               }')
            
            curl -H "Content-Type: application/json" \
                -d "$payload" \
                "$DISCORD_WEBHOOK_URL"